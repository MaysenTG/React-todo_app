{"version":3,"sources":["config.js","Components/layouts/Navbar.js","Components/pages/Todo.js","App.js","index.js"],"names":["getFirestore","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Navbar","className","href","type","placeholder","aria-label","Component","Todo","props","handleSubmit","e","preventDefault","target","InputTodoTitle","value","state","todoList","filter","item","title","length","alert","newTodo","addItem","todoItem","a","list","push","setState","payload","collectionRef","collection","db","addDoc","docRef","console","log","id","handleDelete","handleProgress","doc","deleteDoc","handleComplete","newObj","completed","sort","b","setDoc","handleProcessEdit","newTitle","prompt","itemToEdit","listWithoutItem","user","progress","showProgress","progressPercentage","total","this","forEach","eachItem","checked","style","width","backgroundColor","map","d","key","onClick","defaultChecked","onSubmit","htmlFor","aria-describedby","App","isLoading","q","query","orderBy","onSnapshot","snapshot","docs","data","role","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86ae3c12.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBP1GdbXPwcY74MVGgXkCCPeOlMwO7k9OE\",\n  authDomain: \"reacttodolistdb.firebaseapp.com\",\n  databaseURL: \"https://reacttodolistdb-default-rtdb.firebaseio.com/user001\",\n  projectId: \"reacttodolistdb\",\n  storageBucket: \"reacttodolistdb.appspot.com\",\n  messagingSenderId: \"663259047651\",\n  appId: \"1:663259047651:web:23c195c828a480a678c7d6\",\n  measurementId: \"G-ZVT04LWNKX\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n  \nexport default getFirestore();","import React, { Component } from 'react'\n\nclass Navbar extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <nav className=\"navbar navbar-light\">\n                    <div className=\"container-fluid\">\n                        <a href=\"/todo\" className=\"navbar-brand\">To Do List App</a>\n                        <form className=\"d-flex\">\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search for an item\" aria-label=\"Search\"/>\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                        </form>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react'\n\n\n// Firebase DB imports\nimport db from '../../config'\nimport { collection, setDoc, doc, addDoc, deleteDoc } from 'firebase/firestore'\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\n\nclass Todo extends Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = { \n            todoList: props.todoItem,\n            user: this.props.user,\n            progress: 0,\n            showProgress: false,\n            itemToEdit: null,\n        }\n    }\n    \n    handleSubmit = (e) => {\n        e.preventDefault();\n        //Checks if item already in todo list or if it's empty\n        if(e.target.InputTodoTitle.value === '' || this.state.todoList.filter(item => item.title === e.target.InputTodoTitle.value).length > 0) {\n            alert(\"Please enter a valid item!\")\n        }\n        else {\n            var newTodo = {\"title\": e.target.InputTodoTitle.value, \"completed\": false}\n        \n            this.addItem(newTodo)\n        }\n        e.target.InputTodoTitle.value = '';\n        alert(\"Update successful!\")\n    }\n    \n    \n    addItem = async (todoItem) => {\n        const list = this.state.todoList\n        list.push(todoItem)\n        this.setState({ todoList: list })\n        \n        //Add data to DB\n        const payload = todoItem  \n        const collectionRef = collection(db, \"todolist\")\n        const docRef = await addDoc(collectionRef, payload);\n        console.log(docRef.id)\n        \n        \n        // Update progress after adding item\n        //this.handleProgress()\n    }\n    \n    handleDelete = async (todoItem) => {\n        \n        //Filter through array and add all items except new item to array\n        const list = this.state.todoList.filter(item => item !== todoItem)\n        \n        //Update data\n        this.setState({ todoList: list })\n        \n        //Update progress bar\n        this.handleProgress()\n        \n        const docRef = doc(db, \"todolist\", todoItem.id)\n        await deleteDoc(docRef)\n    }\n    \n    handleComplete = async (todoItem) => {\n        //Remove old item from object        \n        const newObj = this.state.todoList.filter(item => item !== todoItem)\n        \n        //Change complete status\n        if(todoItem.completed) {\n            todoItem.completed = false;\n        }\n        else {\n            todoItem.completed = true;\n        }\n        \n        newObj.push(todoItem)\n        \n        //Sort array so checked items to to the end of the array\n        newObj.sort((a, b) => {\n           return a.completed - b.completed \n        });\n        \n        this.handleProgress();\n        this.setState({ todoList: newObj })\n        \n        // Updating the data within the Firebase DB\n        const docRef = doc(db, \"todolist\", todoItem.id);\n        await setDoc(docRef, todoItem)\n\n    }\n    \n    // Logic for processing the progress bar. Calculated by getting completed items / total as a percentage\n    handleProgress(){\n        let completed = 0;\n        let total = 0\n        let progressPercentage = 0;\n        \n        this.state.todoList.forEach(function (eachItem) {\n            if(eachItem.completed) {\n                completed++;\n            }\n            total++;\n        });\n        \n        progressPercentage = (completed / total) * 100;\n\n        this.setState({ progress: progressPercentage })\n    \n    }\n    \n    // Logic for showing box to edit todo list\n    handleProcessEdit = async (todoItem) => {\n        const newTitle = prompt(\"Edit the following to-do item\", todoItem.title)   \n          \n        if(newTitle === '') {\n            alert(\"Please enter a valid item!\")\n        }\n        else {\n            const itemToEdit = todoItem\n            const listWithoutItem = this.state.todoList.filter(item => item !== itemToEdit)\n            \n            itemToEdit.title = newTitle\n            listWithoutItem.push(itemToEdit)\n            this.setState({ todoList: listWithoutItem })\n            \n            // Updating the data within the Firebase DB\n            const docRef = doc(db, \"todolist\", todoItem.id);\n            await setDoc(docRef, itemToEdit)\n        }\n    }\n    \n    componentDidMount() {\n        //Sort array so checked items to to the end of the array\n        \n        this.state.todoList.sort((a, b) => {\n            return a.checked - b.checked \n        });\n    }\n    \n    \n    render() {\n        return (\n            <div className=\"container-fluid w-50\">\n                <br/>\n                <div className=\"container-fluid\">\n                    <h1>Current to do items</h1>\n                    \n                    <br/>\n                    <div className=\"progress-div d-flex\" style={{width: `100`}}>\n                        <div style={{ width: `${this.state.progress}%`, backgroundColor: '#0d6efd' }} className=\"progress\" />\n                    </div>\n                    <br/>\n                    \n                    <ul className=\"list-group d-flex justify-content-between\">\n                        {this.state.todoList\n                        // If the item is checked, put a cross over the item, otherwise, display it as normal\n                        .map(d => {\n                            if (d.completed)\n                                return <li key={d.title} id=\"todoItem\" className=\"bg-light list-group-item d-flex justify-content-between\">\n                                        <div>\n                                            <input onClick={() => {this.handleComplete(d)}} className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\" defaultChecked={true}/>&nbsp; &nbsp; <del>{d.title}</del>\n                                        </div>\n                                        <div>\n                                            <button type=\"submit\" className=\"btn btn-link\" onClick={() => { this.handleProcessEdit(d) }}>Edit Item</button>\n                                            <button className=\"btn-close\" onClick={() => { this.handleDelete(d) }} aria-label=\"Close\"></button>\n                                        </div>\n                                        \n                                       </li>\n                                \n                            else\n                                return <li key={d.title} id=\"todoItem\" className=\"list-group-item d-flex justify-content-between\">\n                                        <div>\n                                            <input onClick={() => {this.handleComplete(d)}} className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"/>&nbsp; &nbsp; {d.title}\n                                        </div>\n                                        <div>\n                                            <button type=\"submit\" className=\"btn btn-link\" onClick={() => { this.handleProcessEdit(d) }}>Edit Item</button>\n                                            <button className=\"btn-close\" onClick={() => { this.handleDelete(d) }} aria-label=\"Close\"></button>\n                                        </div>\n                                       </li>\n                        })}\n                    </ul>\n                </div>\n                \n                <br/>\n                <br/>\n                \n                <div className=\"container-fluid\">\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"mb-3\">\n                            <label htmlFor=\"InputTodoTitle\" className=\"form-label\">Add new Todo item</label>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Take the dog for a walk\" id=\"InputTodoTitle\" aria-describedby=\"emailHelp\"/>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary\">Add</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Todo;\n","import './App.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport React, { Component } from 'react'\n\n\n// Firebase DB imports\nimport db from './config'\n\nimport { onSnapshot, collection, query, orderBy } from 'firebase/firestore'\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\n\nimport Navbar from './Components/layouts/Navbar'\nimport Todo from './Components/pages/Todo';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { \n        todoList: null,\n        isLoading: true,\n        user: ''\n    }\n  }\n  \n  //Loads the JSON data from the local storage todo-list item when the app loads\n  componentDidMount() {\n    //const userAuth = prompt(\"Enter a user to see their todo list\")\n    try {\n      const q = query(collection(db, \"todolist\"), orderBy(\"completed\", \"asc\"))\n      onSnapshot(q, (snapshot) => {\n        this.setState({ todoList: snapshot.docs.map((doc) => ({...doc.data(), id: doc.id }))})\n        this.setState({ isLoading: false })\n        this.setState({ user: \"todolist\" })\n    });  \n    }\n    catch(e) {\n      console.log(\"No user by the name of todolist\")\n    }\n  }\n\n  \n  render() {\n    return (\n      <Router>\n          <div>\n            <Navbar />\n            {this.state.todoList && <Todo todoItem={this.state.todoList} user={this.state.user}/> }\n            \n            {this.state.isLoading &&\n            <div className=\"h-400 d-flex justify-content-center align-items-center\">\n              <h1>Loading Data &nbsp;</h1>\n              <br/>\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\"></span>\n              </div> \n            </div>\n            }\n                   \n          </div>\n      </Router>\n    );  \n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}